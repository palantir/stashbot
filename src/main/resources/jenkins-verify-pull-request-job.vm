<?xml version='1.0' encoding='UTF-8'?>
#**
  Parameters:
  parameterList: list of params
    each param has type, name, description, defaultValue
  cleanRepositoryUrl
  repositoryUrl
  repositoryRefSpec
  startedCommand
  prebuildCommand
  buildCommand
  successCommand
  failedCommand

  Pull Request Specific params:
  mergeRef ("from ref name")
  mergeRefUrl
  mergeHead ("from ref hash")

  esc - escape tool - required

  isJunit
  junitPath
  credentialUUID
  artifactsEnabled
  artifactsPath

  @author cmyers
*#
#set ($d = "$")
<project>
  <actions/>
  <description>This is the default verify job created automatically by stashbot, and cannot be changed in Jenkins.  Stash Project Link: &lt;a href="$esc.xml($cleanRepositoryUrl)"&gt;$esc.xml($cleanRepositoryUrl)&lt;/a&gt;</description>
  <logRotator class="hudson.tasks.LogRotator">
    <daysToKeep>$verifyBuildExpiryDays</daysToKeep>
    <numToKeep>$verifyBuildExpiryNumber</numToKeep>
    <artifactDaysToKeep>-1</artifactDaysToKeep>
    <artifactNumToKeep>-1</artifactNumToKeep>
  </logRotator>
  <keepDependencies>false</keepDependencies>
  <properties>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
#foreach ( $param in $paramaterList )
        <hudson.model.${param.typeName}>
          <name>$param.name</name>
          <description>$!esc.xml($!param.description)</description>
          <defaultValue>$!esc.xml($!param.defaultValue)</defaultValue>
        </hudson.model.${param.typeName}>
#end
## Merge specific Parameters:
        <hudson.model.StringParameterDefinition>
          <name>mergeRef</name>
          <description>The name of the ref we are merging from</description>
          <defaultValue></defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>mergeRefUrl</name>
          <description>The URL of the ref to fetch</description>
          <defaultValue></defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>mergeHead</name>
          <description>The actual SHA1 of the commit to fetch</description>
          <defaultValue></defaultValue>
        </hudson.model.StringParameterDefinition>
## Let the build figure out which branch is being built
        <hudson.model.StringParameterDefinition>
          <name>buildRef</name>
          <description>The name of the ref we are building against</description>
          <defaultValue></defaultValue>
        </hudson.model.StringParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
  </properties>
  <scm class="hudson.plugins.git.GitSCM" plugin="git@1.1.26">
    <configVersion>2</configVersion>
    <userRemoteConfigs>
      <hudson.plugins.git.UserRemoteConfig>
        <url>$esc.xml($repositoryUrl)</url>
        <name>origin</name>
        <refspec></refspec>
#if ( $credentialUUID )
        <credentialsId>$credentialUUID</credentialsId>
#end
      </hudson.plugins.git.UserRemoteConfig>
    </userRemoteConfigs>
    <branches>
      <hudson.plugins.git.BranchSpec>
        <name>${d}buildHead</name>
      </hudson.plugins.git.BranchSpec>
    </branches>
    <disableSubmodules>false</disableSubmodules>
    <recursiveSubmodules>false</recursiveSubmodules>
    <doGenerateSubmoduleConfigurations>false</doGenerateSubmoduleConfigurations>
    <authorOrCommitter>false</authorOrCommitter>
    <clean>false</clean>
    <wipeOutWorkspace>false</wipeOutWorkspace>
    <pruneBranches>false</pruneBranches>
    <remotePoll>false</remotePoll>
    <ignoreNotifyCommit>false</ignoreNotifyCommit>
    <useShallowClone>false</useShallowClone>
    <buildChooser class="hudson.plugins.git.util.DefaultBuildChooser"/>
    <gitTool>Default</gitTool>
    <submoduleCfg class="list"/>
    <relativeTargetDir></relativeTargetDir>
    <reference></reference>
    <excludedRegions></excludedRegions>
    <excludedUsers></excludedUsers>
    <gitConfigName></gitConfigName>
    <gitConfigEmail></gitConfigEmail>
    <skipTag>true</skipTag>
    <includedRegions></includedRegions>
    <scmName></scmName>
  </scm>
#if ( $isPinned )
  <assignedNode>$label</assignedNode>
  <canRoam>false</canRoam>
#else
  <canRoam>true</canRoam>
#end
  <disabled>false</disabled>
  <blockBuildWhenDownstreamBuilding>false</blockBuildWhenDownstreamBuilding>
  <blockBuildWhenUpstreamBuilding>false</blockBuildWhenUpstreamBuilding>
  <triggers class="vector"/>
  <concurrentBuild>true</concurrentBuild>
  <builders>
    <hudson.tasks.Shell>
        <command>$esc.xml($globalPrebuildCommand)</command>
    </hudson.tasks.Shell>
    <hudson.tasks.Shell>
        <!-- for insane, incomprehensible reasons, jenkins does not do this automatically -->
        <command>(git reset --hard HEAD &amp;&amp; git clean -fdx) || (echo "SETUP exited with status $? ; FAILURE1" ; /bin/false)</command>
    </hudson.tasks.Shell>
    <hudson.tasks.Shell>
        <command>$esc.xml($startedCommand)</command>
    </hudson.tasks.Shell>
    <hudson.tasks.Shell>
        <command>$esc.xml($prebuildCommand)</command>
    </hudson.tasks.Shell>
    <hudson.tasks.Shell>
        <!-- So, here we fetch and merge in the mergeHead.  We merge the hash directly instead of the ref name or FETCH_HEAD to avoid race conditions with the server. -->
        <command>set +x
git merge --no-ff $mergeHead || /bin/false || (echo "BUILD FAILURE$?" &amp;&amp; /bin/false)
set -x</command>
    </hudson.tasks.Shell>
    <hudson.tasks.Shell>
      <command>$esc.xml($buildCommand)</command>
    </hudson.tasks.Shell>
  </builders>
  <publishers>
    <hudson.plugins.postbuildtask.PostbuildTask plugin="postbuild-task@1.8">
      <tasks>
        <hudson.plugins.postbuildtask.TaskProperties>
          <logTexts>
            <hudson.plugins.postbuildtask.LogProperties>
              <logText>BUILD SUCCESS0</logText>
              <operator>AND</operator>
            </hudson.plugins.postbuildtask.LogProperties>
          </logTexts>
          <EscalateStatus>false</EscalateStatus>
          <RunIfJobSuccessful>true</RunIfJobSuccessful>
          <script>$esc.xml($successCommand)</script>
        </hudson.plugins.postbuildtask.TaskProperties>
        <hudson.plugins.postbuildtask.TaskProperties>
          <logTexts>
            <hudson.plugins.postbuildtask.LogProperties>
              <logText>BUILD FAILURE1</logText>
              <operator>AND</operator>
            </hudson.plugins.postbuildtask.LogProperties>
          </logTexts>
          <EscalateStatus>false</EscalateStatus>
          <RunIfJobSuccessful>false</RunIfJobSuccessful>
          <script>$esc.xml($failedCommand)</script>
        </hudson.plugins.postbuildtask.TaskProperties>
        <hudson.plugins.postbuildtask.TaskProperties>
          <logTexts>
            <hudson.plugins.postbuildtask.LogProperties>
              <logText>Build timed out \(after $buildTimeout minutes\)</logText>
              <operator>AND</operator>
            </hudson.plugins.postbuildtask.LogProperties>
          </logTexts>
          <EscalateStatus>false</EscalateStatus>
          <RunIfJobSuccessful>false</RunIfJobSuccessful>
          <script>$esc.xml($failedCommand)</script>
        </hudson.plugins.postbuildtask.TaskProperties>
      </tasks>
    </hudson.plugins.postbuildtask.PostbuildTask>
#if ($isJunit)
    <xunit>
      <types>
        <JUnitType>
          <pattern>$junitPath</pattern>
          <faildedIfNotNew>true</faildedIfNotNew>
          <deleteOutputFiles>true</deleteOutputFiles>
          <stopProcessingIfError>true</stopProcessingIfError>
        </JUnitType>
      </types>
      <thresholds>
        <org.jenkinsci.plugins.xunit.threshold.FailedThreshold>
          <unstableThreshold></unstableThreshold>
          <unstableNewThreshold></unstableNewThreshold>
          <failureThreshold></failureThreshold>
          <failureNewThreshold></failureNewThreshold>
        </org.jenkinsci.plugins.xunit.threshold.FailedThreshold>
        <org.jenkinsci.plugins.xunit.threshold.SkippedThreshold>
          <unstableThreshold></unstableThreshold>
          <unstableNewThreshold></unstableNewThreshold>
          <failureThreshold></failureThreshold>
          <failureNewThreshold></failureNewThreshold>
        </org.jenkinsci.plugins.xunit.threshold.SkippedThreshold>
      </thresholds>
    </xunit>
#end
#if ($isEmailNotificationsEnabled)
    <hudson.tasks.Mailer plugin="mailer@1.5">
      <recipients>$emailRecipients</recipients>
#if ( $isEmailForEveryUnstableBuild )
#set ( $dontNotifyEveryUnstableBuild = "false" )
#else
#set ( $dontNotifyEveryUnstableBuild = "true" )
#end
      <dontNotifyEveryUnstableBuild>$dontNotifyEveryUnstableBuild</dontNotifyEveryUnstableBuild>
      <sendToIndividuals>$isEmailSendToIndividuals</sendToIndividuals>
      <!-- <perModuleEmail>$isEmailPerModuleEmail</perModuleEmail> -->
    </hudson.tasks.Mailer>
#end
#if ( $artifactsEnabled )
    <hudson.tasks.ArtifactArchiver>
      <artifacts>$artifactsPath</artifacts>
      <latestOnly>false</latestOnly>
      <allowEmptyArchive>true</allowEmptyArchive>
    </hudson.tasks.ArtifactArchiver>
#end
  </publishers>
  <buildWrappers>
    <hudson.plugins.build__timeout.BuildTimeoutWrapper plugin="build-timeout@1.15">
      <strategy class="hudson.plugins.build_timeout.impl.AbsoluteTimeOutStrategy">
          <timeoutMinutes>$buildTimeout</timeoutMinutes>
      </strategy>
      <operationList/>
    </hudson.plugins.build__timeout.BuildTimeoutWrapper>
  </buildWrappers>
</project>
